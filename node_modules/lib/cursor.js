var  common_lib	      = require('./commonLib')
   , CompareCSSClasses  = require('./compareClass');

var Cursor = (function(){

	function Cursor(args /*obj*/){
		var  args = args || {};
		this.stringToCheck  = args.file 	 || dev_cssFile;
		this.cur 			  = args.cur  	 || 0;
		this.bCur			  = args.bCur 	 || 0;
		this.isChild        = args.isChild || false;
		this.curCssFormHtml = args.curCssFormHtml;
		this.targetWrite    = args.targetWrite || null;

		this._fLen = this.stringToCheck.length;
		this._tmpCSSSelector 			= '';
		this._tmpCSSRule 					= '';
		this._tmpRuleObject  			= {};
		this._tmpNoCompareRuleObject  = {};

		this._state = 'd';  // d - default , @ - all media
		this._state__type = '';
		this._state__selector = false;
		this.outPut = false;

		this.prepare();
		if (this.outPut) {
			return this.outPut;
		}
	}

	Cursor.prototype = {
		constructor: Cursor,
		/**
		 * dell all spaces and tabs
		 */
		prepare: function(){
			var pat = new RegExp('\n|\r|\t','g');
			this.stringToCheck = this.stringToCheck.replace(pat,'');
			this.chSlider();
		},
		chSlider: function(){
			var a;
			for (; this.cur < this._fLen;  this.cur++){
				if (this.stringToCheck[this.cur]) {
					this.strController(this.stringToCheck[this.cur]);
				}
			}
//		common_lib.writeFile('cl.txt',this._tmpRuleObject.toString());
			if (!this.isChild) {
				a = new CompareCSSClasses(this._tmpRuleObject, this.curCssFormHtml);
				if (Object.keys(this._tmpNoCompareRuleObject).length){
					for (var i in this._tmpNoCompareRuleObject) {
						a.comparedObj[i] = this._tmpNoCompareRuleObject[i];
					}
				}
				this.outPut = this.outPut || a.comparedObj;
			}
		},
		strController: function(ch){
			//d - default context
			if (this._state === 'd'){
				switch (ch){
					case '{':   this._tmpCSSSelector = this.slicer(this.bCur, this.cur);     break;
					case '}':   this._tmpCSSRule     = this.slicer(this.bCur, this.cur);     break;
					case '@':   this._state = '@'; break;
				}
			}
			//@ - media context
			if (this._state === '@') {
				this._state__type = (!this._state__type) ? common_lib.getMediaType(this.cur, this.stringToCheck) : this._state__type;
				switch (ch){
					case '{':
						if (!this._state__selector) {
							this._tmpCSSSelector = this.slicer(this.bCur, this.cur);
							this._state__selector = true;
						}
						break;
					case '}':
						// todo: идти в цикле пока есть пробелы до того как не найдем другой символ (не критично т.к. файл на входе минифицирован)
						if (ch === this.stringToCheck[this.cur+1]){ //   }}
							if (!this._state__type) {
								this._tmpCSSRule = this.slicer(this.bCur, this.cur+1);
							}
							else if (this._state__type == '@media') {
								this._tmpCSSRule = new Cursor({ 'file' : this.slicer(this.bCur, this.cur+1), 'isChild' : true })._tmpRuleObject;
							}
							this._state = 'd';
							this._state__selector = false;
						}
						// rule for no compare
						else if (this._state__type == '@font-face'){
							this._tmpNoCompareRuleObject[this._state__type] = this.slicer(this.bCur, this.cur);
							this._state = 'd';
							this._state__selector = false;
						}
						break;
				}
			}
			if (this._tmpCSSSelector && this._tmpCSSRule) {
				this._tmpRuleObject[this._tmpCSSSelector.trim()] = this._tmpCSSRule;
//					console.log(this._tmpRuleObject);
				this._tmpCSSSelector = '';
				this._tmpCSSRule 		= '';
				this._state__type 	= '';
			}
		},
		toString: function(obj){
			var str = '', curObj = obj || this.outPut;
			for (var i in curObj){
				str += i + '{'+ ((typeof curObj[i]==='object') ? this.toString(curObj[i]) : curObj[i]) +'}';
			}
			if (obj) return str;
			common_lib.writeFile(this.targetWrite, str);
		},
		slicer: function(buffer, cursor){
			var v = this.stringToCheck.slice(buffer,cursor);
			this.bCur = this.cur+1;
			return v;
		}
	};
	return Cursor;
})();


module.exports = Cursor;