var common_lib			= require('./commonLib');

function ClassCollector(file_links/*obj*/, callback/*func*/){
	this.instance = file_links.instance;
	this.output	  = file_links.settings.output;
	this.html 	  = file_links.settings.html;
	this.css  	  = file_links.settings.css;
	this.file 	  		 	 = this.fileController();
	this.htmlClassList 	 = this.get_htmlClassList();
	this.htmlClassListArr = this.htmlClassList.split('\n');
}

ClassCollector.prototype = {
	constructor: ClassCollector
	,fileController: function(){
		var type = common_lib.getObjectType(this.html);
		var allFiles = '';
		if (type === 'array'){
			for (var i=0; i<this.html.length; i++){
				allFiles += common_lib.readFile(this.html[i]);
			}
			return allFiles;
		}
		else if (type === 'string'){
			return common_lib.readFile(this.html);
		} else {
			throw new Error('ClassCollector: Not supporting format type. Use only Array or String types.');
		}
	}
	,get_htmlClassList: function(){
		var output = [];
		var strList = this.file.split("\n").map(function(x){ return x.trim();});
		delete strList[strList.length-1];
		for(var i=0, len=strList.length-1; i<len; i++){
			var tmp_arr;
			// get class elems from line
			var tmp_val = strList[i].match(/class=["|']([a-zA-Z0-9\s_-]*)["|']/);
			if (tmp_val) tmp_arr=tmp_val[1].split(' ');

			if (tmp_arr){
				for (var j=0, jlen=tmp_arr.length; j<jlen; j++){
					var wordToCheck = tmp_arr[j];
					if (!wordToCheck || wordToCheck==" ") continue;
					if (!common_lib.isWordInArray(wordToCheck, output)) {
						output.push(wordToCheck);
					}
				}
			}
		}

		var output_str = '';
		for (var i=0; i<output.length; i++){
			output_str += '.'+output[i] + ((i<output.length-1)?'\n':'');
		}
		return output_str;
	}
};




module.exports = ClassCollector;